## Macros to manage material settings
# The following macros are a derivative work from _kbobine filament settings_ project

# This config file contains macros that are used in conjuction with material settings
[gcode_macro _MATERIAL]
variable_default: {  
        "pressure_advance": 0.048,
        "pressure_advance_smooth_time": 0.015,
        "retract_length": 0.5,
        "unretract_extra_length": 0,
        "retract_speed": 40,
        "unretract_speed": 30,
        "filter_speed": 80,
        "additional_z_offset": 0,
        "filament_sensor": 1,

        "standby_retract_length": 20,       # Amount to retract after purge or endprint (in mm) to place filament in standby zone (Should be near the prime_pressure_lenght)

        "prime_line_pressure_length": 18,   # distance to push filament to add  pressure into hotend (value near standby_retract_length if you purge before print )
        "prime_line_purge_length": 30,      # length of filament to purge (in mm)
        "prime_line_flowrate": 10,          # mm3/s used for the prime line

        "purge_speed": 2.5,                 # Speed to purge (in mm/s)
        "purge_length": 30,                 # Amount to purge (in mm)
    }
variable_current: {  
    }    
gcode:

### MACROS ###
# Add/set a material to the material_table
[gcode_macro SET_MATERIAL]
description: Add/Set material to config, if a parameter is empty it will use the default value
gcode:
    {% set _ = params.NAME %}
#######################################################################
## Declare entry params Only for GUI (Fluidd/Mainsail/Klipperscreen) ##
## Entries must correspond to the variable_default keys
    {% set _ = params.PRESSURE_ADVANCE %}
    {% set _ = params.PRESSURE_ADVANCE_SMOOTH_TIME %}
    {% set _ = params.RETRACT_LENGTH %}
    {% set _ = params.UNRETRACT_EXTRA_LENGTH %}
    {% set _ = params.RETRACT_SPEED %}
    {% set _ = params.UNRETRACT_SPEED %}
    {% set _ = params.FILTER_SPEED %}
    {% set _ = params.ADDITIONAL_Z_OFFSET %}
    {% set _ = params.FILAMENT_SENSOR %}

    {% set _ = params.STANDBY_RETRACT_LENGTH %}

    {% set _ = params.PRIME_LINE_PRESSURE_LENGTH %}
    {% set _ = params.PRIME_LINE_PURGE_LENGTH %}
    {% set _ = params.PRIME_LINE_FLOWRATE %}
    {% set _ = params.PURGE_SPEED %}
    {% set _ = params.PURGE_LENGTH %}
#######################################################################
    _SET_MATERIAL {rawparams}

# variable kept for backward compatibility
[gcode_macro _USER_VARIABLES]
variable_material_parameters: {}

# Remove a material from the material_table
[gcode_macro REMOVE_MATERIAL]
description: Remove material from config
gcode:
    {% set _p = params %}   
    {% set fs_table= printer["gcode_macro _USER_VARIABLES"].material_parameters%}
    {% set NAME = params.NAME|default(printer.save_variables.variables.current_material_name) %}
    
    {% if _p.CONFIRM == "1" %}
        _PROMPT_CLOSE
        {% if NAME|length %}
            {% if fs_table[NAME] %}
                {% set _= fs_table.pop(NAME) %}
                SET_GCODE_VARIABLE MACRO=_USER_VARIABLES VARIABLE=material_parameters VALUE='{ fs_table|tojson }'
                _SAVE_MATERIAL_PROFILES
                _RESTORE_LAST_USED_MATERIAL
            {% else %}
                {action_raise_error("Material '%s' not found" % NAME)}
            {% endif %}
        {% else %}
            {action_raise_error("No material specified")}
        {% endif %}
    {% else %}
        _PROMPT_QUESTION TITLE="Remove Material" MSG="Are you sure you want to remove '{NAME}' permanently ?" ACTION="REMOVE_MATERIAL NAME=\\\"{NAME}\\\" CONFIRM=1"
    {% endif %}

# Reset material_table
[gcode_macro RESET_MATERIALS]
description: Reset material_table
gcode:
    {% set _p = params %}
    {% set fs_table = printer.configfile.config["gcode_macro _USER_VARIABLES"].variable_material_parameters|replace('\n','')  %}
    
    {% if _p.CONFIRM == "1" %}
        _PROMPT_CLOSE
        {% if fs_table|length %}
            SET_GCODE_VARIABLE MACRO=_USER_VARIABLES VARIABLE=material_parameters VALUE="{ fs_table }"
            _SAVE_MATERIAL_PROFILES
            _LOAD_MATERIAL_PROFILES
            _RESTORE_LAST_USED_MATERIAL
        {% else %}
            {action_raise_error("No materials found in configfile")}
        {% endif %}
    {% else %}
        _PROMPT_QUESTION TITLE="Reset Material settings" MSG="Are you sure you want to reset material_table ? All changes in material_table will be erased" ACTION="RESET_MATERIALS CONFIRM=1"
    {% endif %}

[gcode_macro SELECT_MATERIAL]
description: Select a material from list
gcode:
    {% set fs_table= printer["gcode_macro _USER_VARIABLES"].material_parameters%}
        
    _PROMPT_SELECT TITLE="Select material" MSG="Load parameters for : " OPTIONS="{ fs_table.keys()|join(',')
        }" ACTION="_LOAD_MATERIAL" KEY=NAME


### BACKEND ###
# Load material settings from the material_table
[gcode_macro _LOAD_MATERIAL]
description: Load material settings
gcode:
    {% set _p = params %}
    {% set fs_table= printer["gcode_macro _USER_VARIABLES"].material_parameters %}
    {% set NAME = params.NAME|default("") %}
    
    _PROMPT_CLOSE
    {% if NAME|length %}
        {% if fs_table[NAME] %}
            RESPOND MSG="Material '{NAME}' is used"
            SAVE_VARIABLE VARIABLE=current_material_name value='"{NAME}"'
            _RESTORE_LAST_USED_MATERIAL
        {% else %}
            RESPOND MSG="Material '{MATERIAL}' is unknown!"
            { action_raise_error("Use SET_MATERIAL macro to add this new material!") }
        {% endif %}
    {% else %}
        {action_raise_error("No material specified") }
    {% endif %}

# Records the material settings in the material_table
[gcode_macro _SET_MATERIAL]
description: Set material settings
gcode:

    {% set _p=params %}
## remove empty parameters (Fluidd hack)
    {% for param in _p.copy() if _p[param] == "" %}
        {% set _= _p.pop(param) %}
    {% endfor %}

## load variables
    {% set fs_table = printer["gcode_macro _USER_VARIABLES"].material_parameters%}
    {% set NAME = _p.NAME|default(printer.save_variables.variables.current_material_name) %}
    {% set default = printer["gcode_macro _MATERIAL"].default %}
##  
    {% if NAME|length %}
        {% if not fs_table[NAME] %}
            {% set _= fs_table.update({NAME:default}) %}
        {% endif %}
        {% for param, value in _p.items() if param | lower in default %}
            {% set _= fs_table[NAME].update({param|lower :
                value|int if (value|float == value|int and value|float != 0.0) or value == '0' else (
                value|float if value|float != 0.0 else 
                value|string
                )}) %}
        {% endfor %}
        SET_GCODE_VARIABLE MACRO=_USER_VARIABLES VARIABLE=material_parameters VALUE='{ fs_table|tojson }'
        # Apply changes to current material array
        _RESTORE_LAST_USED_MATERIAL
        _PROMPT_QUESTION TITLE="Save Material settings" MSG="Do you want to keep the settings for {NAME} accross restarts ?" ACTION="_SAVE_MATERIAL_PROFILES"
    {% else %}
        {action_raise_error("No settings to apply, NAME is empty")}
    {% endif %}

# Load material settings from the material_table
[gcode_macro _LOAD_MATERIAL_PROFILES]
description: Load material settings from the material_table
gcode:
    {% set fs_table = printer.save_variables.variables.material_table | default({}) %}
    {% set default = printer["gcode_macro _MATERIAL"].default %}
    {% if fs_table|length > 0 %}
        {% for name, settings in fs_table.items() %}
            # Add missing parameters from default
            {% for parameter in default if parameter not in settings %}
                {% set _=fs_table[name].update( {parameter:default[parameter]} ) %}
            {% endfor %}
        {% endfor %}
        SET_GCODE_VARIABLE MACRO=_USER_VARIABLES VARIABLE=material_parameters VALUE='{ fs_table|tojson }'
    {% else %}
        {action_raise_error("No materials found in material_table")}
    {% endif %}

# Save material settings to the material_table
[gcode_macro _SAVE_MATERIAL_PROFILES]
description: Save material settings to the material_table
gcode:
    {% set fs_table = printer["gcode_macro _USER_VARIABLES"].material_parameters | default({}) %}
    {% set default = printer["gcode_macro _MATERIAL"].default %}
    {% set toremove={}%}
   
    _PROMPT_CLOSE
    {% if fs_table|length %}
        {% for name, settings in fs_table.copy().items() %}
            # Remove parameters that are the same as the default
            {% for parameter in default 
                if settings[parameter] == default[parameter] %}
                {% set _=fs_table[name].pop(parameter) %}
            {% endfor %}
            # Remove parameters that are not in default
            {% for parameter in settings.copy() if parameter not in default %}
                {% set _=fs_table[name].pop(parameter) %}
            {% endfor %}
        {% endfor %}
        SAVE_VARIABLE VARIABLE=material_table value='{ fs_table|tojson }'
    {% else %}
        {action_raise_error("No material settings found in material_parameters")}
    {% endif %}

### BACKWARD COMPATIBILITY
# Migrate config Apply the material, could be removed in a future release
[gcode_macro _MIGRATE_MATERIAL_SETTINGS]
gcode:
    {% set fs_table = printer.save_variables.variables.material_table | default({}) %}
    {% if fs_table|length == 0 %}
        ## Migrate old material_parameters to material_table in save_variables
        _SAVE_MATERIAL_PROFILES
        RESPOND TYPE=error MSG="_USER_VARIABLES material_parameters are now stored into Save_variables !"
        RESPOND TYPE=echo MSG="Use SET_MATERIAL to add or edit a material"
    {% endif %}


# Restore last used material 
[gcode_macro _RESTORE_LAST_USED_MATERIAL]
description: Restore last used material
gcode:
    {% set material_name = printer.save_variables.variables.current_material_name %}
    {% if material_name %}
        {% set current = printer["gcode_macro _USER_VARIABLES"].material_parameters[material_name] | default("") %}
        {% if current|length %}
            SET_GCODE_VARIABLE MACRO=_MATERIAL VARIABLE=current VALUE='{ current|tojson }'
        {% else %}
            RESPOND TYPE=error  MSG="Material '{material_name}' is unknown!"
            RESPOND TYPE=error  MSG="Use SET_MATERIAL macro to add this new material!"
        {% endif %}
    {% endif %}
